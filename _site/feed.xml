<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="ko">
  <generator uri="http://jekyllrb.com" version="4.0.0">Jekyll</generator>
  
  
  <link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://localhost:4000/" rel="alternate" type="text/html" hreflang="ko" />
  <updated>2019-12-18T17:53:14+00:00</updated>
  <id>http://localhost:4000//</id>

  
    <title type="html">Heum’s blog</title>
  

  
    <subtitle>Let's do the **hard work like it's easy**.</subtitle>
  

  
    <author>
        <name>HeumHeum2</name>
      
      
    </author>
  

  
  
    <entry xml:lang="ko">
      
      <title type="html">Git 명령어</title>
      
      
      <link href="http://localhost:4000/2019/12/18/command-git/" rel="alternate" type="text/html" title="Git 명령어" />
      
      <published>2019-12-18T00:00:00+00:00</published>
      <updated>2019-12-18T00:00:00+00:00</updated>
      <id>http://localhost:4000/2019/12/18/command-git</id>
      <content type="html" xml:base="http://localhost:4000/2019/12/18/command-git/">&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init
&lt;span class=&quot;c&quot;&gt;# 현재 디렉토리 위치에 .git 만듦.&lt;/span&gt;

git status
&lt;span class=&quot;c&quot;&gt;# 상태 확인.&lt;/span&gt;

git add &amp;lt;files name&amp;gt;
&lt;span class=&quot;c&quot;&gt;# working Directory에 있는 작업들을 Stage Area에 복사함.&lt;/span&gt;

git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &amp;lt;message&amp;gt;
&lt;span class=&quot;c&quot;&gt;# Stage Area에 있는 작업들을 .git에 저장함.&lt;/span&gt;

git log
&lt;span class=&quot;c&quot;&gt;# commit 된 기록들을 보여줌.&lt;/span&gt;

git reset &lt;span class=&quot;nt&quot;&gt;--hard&lt;/span&gt; &amp;lt;Commit ID&amp;gt;
&lt;span class=&quot;c&quot;&gt;# master의 내용을 입력한 Commit ID로 바뀌어 복원 및 삭제가 일어남.&lt;/span&gt;

git checkout &amp;lt;Commit ID or branch&amp;gt;
&lt;span class=&quot;c&quot;&gt;# HEAD가 입력한 Commit ID 또는 branch로 바뀌어 현재 작업하고 있는 버전이 바뀜.&lt;/span&gt;

git branch &amp;lt;branch name&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 현재 위치한 곳에 branch를 만듬.&lt;/span&gt;

git merge &amp;lt;A branch located elsewhere&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 현재 위치한 곳에서 다른 곳에 위치한 branch와 합침.&lt;/span&gt;

git remote add &amp;lt;remote name&amp;gt; &amp;lt;URL or SSH&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 원격저장소 경로 지정.&lt;/span&gt;

git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; &amp;lt;remote name&amp;gt; &amp;lt;branch&amp;gt;
&lt;span class=&quot;c&quot;&gt;# 원격저장소에 현재 branch로 파일들을 올림.&lt;/span&gt;

git pull
&lt;span class=&quot;c&quot;&gt;# 원격저장소에서 파일들을 가져옴.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;</content>

      
      
      
      
      

      
        <author>
            <name>HeumHeum2</name>
          
          
        </author>
      

      
        <category term="Git" />
      
        <category term="Study" />
      
        <category term="Command" />
      

      

      
        <summary type="html">git init # 현재 디렉토리 위치에 .git 만듦. git status # 상태 확인. git add &amp;lt;files name&amp;gt; # working Directory에 있는 작업들을 Stage Area에 복사함. git commit -m &amp;lt;message&amp;gt; # Stage Area에 있는 작업들을 .git에 저장함. git log # commit 된 기록들을 보여줌. git reset --hard &amp;lt;Commit ID&amp;gt; # master의 내용을 입력한 Commit ID로 바뀌어 복원 및 삭제가 일어남. git checkout &amp;lt;Commit ID or branch&amp;gt; # HEAD가 입력한 Commit ID 또는 branch로 바뀌어 현재 작업하고 있는 버전이 바뀜. git branch &amp;lt;branch name&amp;gt; # 현재 위치한 곳에 branch를 만듬. git merge &amp;lt;A branch located elsewhere&amp;gt; # 현재 위치한 곳에서 다른 곳에 위치한 branch와 합침. git remote add &amp;lt;remote name&amp;gt; &amp;lt;URL or SSH&amp;gt; # 원격저장소 경로 지정. git push -u &amp;lt;remote name&amp;gt; &amp;lt;branch&amp;gt; # 원격저장소에 현재 branch로 파일들을 올림. git pull # 원격저장소에서 파일들을 가져옴.</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">Git 공부 3일차</title>
      
      
      <link href="http://localhost:4000/2019/12/13/third-of-git/" rel="alternate" type="text/html" title="Git 공부 3일차" />
      
      <published>2019-12-13T00:00:00+00:00</published>
      <updated>2019-12-13T00:00:00+00:00</updated>
      <id>http://localhost:4000/2019/12/13/third-of-git</id>
      <content type="html" xml:base="http://localhost:4000/2019/12/13/third-of-git/">&lt;p&gt;이번 세미나는 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt; 명령어와 &lt;strong&gt;협업&lt;/strong&gt;이 중심 내용이였다.&lt;/p&gt;

&lt;h3&gt;$ git merge&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;는 작업하고 있는 &lt;strong&gt;branch&lt;/strong&gt; 들을 합치고 싶을 때 사용하는 명령어다.&lt;/p&gt;

&lt;p&gt;먼저 &lt;strong&gt;master&lt;/strong&gt;에는 m_work.txt 파일을 &lt;strong&gt;exp&lt;/strong&gt;에는 e_work.txt 파일을 만들어 서로 다르게 해주었다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# master files&lt;/span&gt;
work.txt
m_work.txt

&lt;span class=&quot;c&quot;&gt;# exp&lt;/span&gt;
work.txt
e_work.txt

&lt;span class=&quot;c&quot;&gt;# log&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 63d2d07 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working e2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 682767a working e1
| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 3dd3a20 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working m2
| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5836424 working m1
|/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5bd3f73 working 3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; b023f81 working 2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 247a290 working 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;--oneline&lt;/code&gt; 옵션은 한 줄로 보겠다는 옵션이고, &lt;code class=&quot;highlighter-rouge&quot;&gt;-all&lt;/code&gt;은 모든 branch 및 tag의 기록을, &lt;code class=&quot;highlighter-rouge&quot;&gt;--graph&lt;/code&gt;는 그래프로 보여주는 옵션이다.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 보면 commit ID &lt;strong&gt;5bd3f73&lt;/strong&gt; 이후로 서로 다른 길을 가고 있음을 보여준다. 이 둘을 한번 합쳐보겠다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# 현재 HEAD가 위치한 곳은 master이다.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge exp
Merge made by the &lt;span class=&quot;s1&quot;&gt;'recursive'&lt;/span&gt; strategy.
 e_work.txt | 2 ++ 
 1 file changed, 2 insertions&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;+&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
 create mode 100644 e_work.txt

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   81b2063 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; Merge branch &lt;span class=&quot;s1&quot;&gt;'exp'&lt;/span&gt;
|&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 63d2d07 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working e2
| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 682767a working e1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | 3dd3a20 working m2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | 5836424 working m1
|/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 5bd3f73 working 3
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; b023f81 working 2
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 247a290 working 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt;를 사용하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;create mode 100644 e_work.txt&lt;/code&gt; 부분을 보면, e_work.txt가 &lt;strong&gt;master&lt;/strong&gt;에 새로 생겼음을 알 수 있다. 이로써 다른 파일은 순조롭게 합쳐지는 것을 알 수 있었다.&lt;/p&gt;

&lt;p&gt;만약 같은 파일에서 &lt;strong&gt;branch&lt;/strong&gt;들을 합치고 싶을 때는 어떻게 적용되는지 해보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;(parent)    (master)      (exp)
0               0           0
0               0           0
0               m1          0
0               0           0
0               0           e1
0               0           0
0               m1          0
0               0           e1
0               0           0
0               m1          e1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;우선 work.txt 파일을 만들고, &lt;strong&gt;master&lt;/strong&gt;와 &lt;strong&gt;exp&lt;/strong&gt;를 파일을 변경해 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;해보았다.&lt;br /&gt;
합치기 전에 HEAD가 누구를 가르키고 있는지에 따라서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge &amp;lt;branch name&amp;gt;&lt;/code&gt;의 branch name을 신경써줘야한다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt; 에서 &lt;strong&gt;exp&lt;/strong&gt;를 합쳐보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git merge exp
Auto-merging work.txt &lt;span class=&quot;c&quot;&gt;# 자동으로 합쳐준다.&lt;/span&gt;
CONFLICT &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;content&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: Merge conflict &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;work.txt
Automatic merge failed&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; fix conflicts and &lt;span class=&quot;k&quot;&gt;then &lt;/span&gt;commit the result.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;conflict&lt;/strong&gt;이 났다고 알려준다. 왜 그런지 살펴보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot; data-lang=&quot;txt&quot;&gt;(master|MERGING)
0
0
m1
0
0
e1
0
m1
0
e1
0
&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD
m1
=======
e1
&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; exp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다른 것들은 자동으로 합쳐줬지만 마지막 행은 &lt;strong&gt;parent&lt;/strong&gt;와 비교했을 때 둘다 변경이 되었으니 개발자가 변경해달라고 요청하는 것이다.&lt;br /&gt;
&lt;strong&gt;branch&lt;/strong&gt;를 보면 &lt;strong&gt;master|MERGING&lt;/strong&gt; 로 되어있어, 합성중인 상태라는 것을 알 수 있다.&lt;br /&gt;
만약 합성을 취소하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git merge --abort&lt;/code&gt;명령어를 사용하면 합성 전으로 돌아갈 수 있다.&lt;br /&gt;
충돌 내용을 변경 후, 합성을 다시 진행하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;을 하면 새로운 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit ID&lt;/code&gt;를 만들어 완성본을 보여준다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master|MERGING&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git commit &lt;span class=&quot;nt&quot;&gt;-am&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;working merge&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;master dfdca9c] working merge

&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--graph&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;   dfdca9c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working merge
|&lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
| &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 4708c05 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working e1
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; | ecae6e2 working &lt;span class=&quot;nt&quot;&gt;-m1&lt;/span&gt;
|/
&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; aec874d working 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 찍어서 보면 제대로 합성되었음을 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;«««&amp;lt; HEAD
«««&amp;lt; HEAD
—&lt;/p&gt;

&lt;h2&gt;GitHub&lt;/h2&gt;

&lt;p&gt;지금까지 내용들은 모두 local에서 이뤄진 것!&lt;br /&gt;
혹여나 노트북이 말썽을 일으켜 포맷을 해야된다면 지금까지 작업했던 것이 다 날아가게 된다.&lt;br /&gt;
그래서 우리는 &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt; 같은 remote storage(원격 저장소)를 이용해 백업을 해야한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/loginGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;아직, &lt;a href=&quot;https://github.com&quot;&gt;GitHub&lt;/a&gt;에 가입 하지 않았다면 회원가입을 하자.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/setGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;+&lt;/strong&gt;를 누르게 되면 &lt;strong&gt;New repository&lt;/strong&gt;가 보인다. 프로젝트를 올릴 때 자주 가게 될 녀석이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/createGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Repository name&lt;/strong&gt;에 진행중인 프로젝트 이름을 적어주고, 프로젝트의 성향에 따라 Public, Private을 설정하면 될 것 같다. README는 주로 프로젝트 설명서이다. 마크다운 형식으로 작성 할 수 있다고 하는데 아직 작성해본 적은 없다.&lt;br /&gt;
&lt;strong&gt;Repository name&lt;/strong&gt;을 TestRepository라고 적고 생성해보았다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;/assets/testGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;이제 local storage에 remote storage 경로를 지정해주면 연결은 끝이 난다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git remote add&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git remote add &amp;lt;remote name&amp;gt;&amp;lt;HTTPS or SSH&amp;gt;&lt;/code&gt; remote storage에 연결해주기 위한 명령어이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;remote name&amp;gt;&lt;/code&gt;는 remote storage의 이름을 적는데, 대부분 origin을 많이 쓴다고 한다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/HttpsOrSshGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;HTTPS or SSH&amp;gt;&lt;/code&gt;는 적혀져 있으니 HTTPS로 할 것인지 SSH로 할 것인지 정해주면 된다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git merge&lt;/code&gt; 했던 프로젝트와 연결해보겠다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git remote add origin git@github.com:HeumHeum2/TestRepository.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;연결이 되었는지 확인해보고자 프로젝트를 올려봐야 알 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git push&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push -u &amp;lt;remote name&amp;gt; &amp;lt;branch&amp;gt;&lt;/code&gt; 명령어는 프로젝트를 &lt;strong&gt;HEAD&lt;/strong&gt;가 가르키고 있는 &lt;strong&gt;branch&lt;/strong&gt;와 같은 이름으로 된 remote storage의 &lt;strong&gt;branch&lt;/strong&gt;에 업로드 해주는 역할을 한다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin master
The authenticity of host &lt;span class=&quot;s1&quot;&gt;'github.com (15.164.81.167)'&lt;/span&gt; can&lt;span class=&quot;s1&quot;&gt;'t be established.
RSA key fingerprint is SHA256: ###
Are you sure you want to continue connecting (yes/no/[fingerprint])? yes
Warning: Permanently added '&lt;/span&gt;github.com,15.164.81.167&lt;span class=&quot;s1&quot;&gt;' (RSA) to the list of known hosts.
git@github.com: Permission denied (publickey).
fatal: Could not read from remote repository.

Please make sure you have the correct access rights
and the repository exists.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;진행하다보면 이런 창이 나올 수도 있다. SSH Key가 나의 계정에 등록되지 않았기에 발생하는 Permission denied이다. 당황하지 말고, 내 계정의 &lt;strong&gt;Settings&lt;/strong&gt;을 들어가보자.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/sshSetGitHub.png&quot; alt=&quot;text&quot; /&gt;&lt;/p&gt;

&lt;p&gt;들어가게 되면 이런 창이 나오는데, 혹시 SSH Key를 어디서 확인하는지 모르는 경우 &lt;a href=&quot;https://help.github.com/en/github/authenticating-to-github/connecting-to-github-with-ssh&quot;&gt;여기&lt;/a&gt;를 클릭해 진행하면 될 것이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git push &lt;span class=&quot;nt&quot;&gt;-u&lt;/span&gt; origin master
Enumerating objects: 12, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Counting objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12/12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Delta compression using up to 12 threads
Compressing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;4/4&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Writing objects: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;12/12&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, 853 bytes | 426.00 KiB/s, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
Total 12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, reused 0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;delta 0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
remote: Resolving deltas: 100% &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;1/1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;
To https://github.com/HeumHeum2/TestRepository.git
 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;new branch]      master -&amp;gt; master
Branch &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;up to track remote branch &lt;span class=&quot;s1&quot;&gt;'master'&lt;/span&gt; from &lt;span class=&quot;s1&quot;&gt;'origin'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--oneline&lt;/span&gt;
dfdca9c &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, origin/master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working merge
4708c05 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;exp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; working e1
ecae6e2 working &lt;span class=&quot;nt&quot;&gt;-m1&lt;/span&gt;
aec874d working 1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pushGitHub.png&quot; alt=&quot;test&quot; /&gt;&lt;/p&gt;

&lt;p&gt;SSH KEY 등록이 끝나고 push를 하면 remote storage에 파일이 업로드 된 모습과, &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;에서는 &lt;strong&gt;origin/master&lt;/strong&gt;가 생긴 것을 볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git pull&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git push&lt;/code&gt;가 remote storage에 업로드 하는 명령어라면, &lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;은 다운로드 하는 명령어이다.&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;git pull&lt;/code&gt;도 처음에 remote storage를 연결 시켜줘야하며, 주로 협업 진행 중 일을 시작할 때 가장 많이 사용되는 명령어라고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git clone&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone &amp;lt;HTTPS OR SSH&amp;gt;&lt;/code&gt; 는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.git&lt;/code&gt; 디렉토리가 없어도 remote storage에 업로드 되어있는 버전을 그대로 가져와 작업 할 수 있게 도와주는 명령어이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;마치며&lt;/h2&gt;

&lt;p&gt;3일동안의 Git 세미나가 끝이 났다…&lt;br /&gt;
Git의 사용법을 몰라 두려워만 하고 있었는데 세미나를 통해 Git이 너무 편리한 녀석인 것을 알게 되었다.&lt;br /&gt;
모르면 정말 불편하지만 알게되면 정말 편리한 Git.. &lt;del&gt;그저 갓&lt;/del&gt;&lt;br /&gt;
다시 한번 복습하기 위해 처음으로 블로그에 글을 써봤다. 남들에게 알려준다는 생각으로 글을 쓰다보니 내가 어떤 것을 모르는지 깨닫게 된 계기와 지식을 공유 할때 내가 즐거워한다는 것을 깨달았다.&lt;br /&gt;
React를 현재 공부중인데, 지식을 공유한다고 생각하고 하나 씩 글을 써 나가야겠다.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>HeumHeum2</name>
          
          
        </author>
      

      
        <category term="Git" />
      
        <category term="Study" />
      

      

      
        <summary type="html">이번 세미나는 git merge, git remote add, git push, git pull 명령어와 협업이 중심 내용이였다. $ git merge git merge는 작업하고 있는 branch 들을 합치고 싶을 때 사용하는 명령어다. 먼저 master에는 m_work.txt 파일을 exp에는 e_work.txt 파일을 만들어 서로 다르게 해주었다. # master files work.txt m_work.txt # exp work.txt e_work.txt # log $ git log --oneline --all --graph * 63d2d07 (exp) working e2 * 682767a working e1 | * 3dd3a20 (HEAD -&amp;gt; master) working m2 | * 5836424 working m1 |/ * 5bd3f73 working 3 * b023f81 working 2 * 247a290 working 1 --oneline 옵션은 한 줄로 보겠다는 옵션이고, -all은 모든 branch 및 tag의 기록을, --graph는 그래프로 보여주는 옵션이다. git log를 보면 commit ID 5bd3f73 이후로 서로 다른 길을 가고 있음을 보여준다. 이 둘을 한번 합쳐보겠다. (master) # 현재 HEAD가 위치한 곳은 master이다. $ git merge exp Merge made by the 'recursive' strategy. e_work.txt | 2 ++ 1 file changed, 2 insertions(+) create mode 100644 e_work.txt $ git log --oneline --all --graph * 81b2063 (HEAD -&amp;gt; master) Merge branch 'exp' |\ | * 63d2d07 (exp) working e2 | * 682767a working e1 * | 3dd3a20 working m2 * | 5836424 working m1 |/ * 5bd3f73 working 3 * b023f81 working 2 * 247a290 working 1 git merge를 사용하고 create mode 100644 e_work.txt 부분을 보면, e_work.txt가 master에 새로 생겼음을 알 수 있다. 이로써 다른 파일은 순조롭게 합쳐지는 것을 알 수 있었다. 만약 같은 파일에서 branch들을 합치고 싶을 때는 어떻게 적용되는지 해보자. (parent) (master) (exp) 0 0 0 0 0 0 0 m1 0 0 0 0 0 0 e1 0 0 0 0 m1 0 0 0 e1 0 0 0 0 m1 e1 우선 work.txt 파일을 만들고, master와 exp를 파일을 변경해 git commit해보았다. 합치기 전에 HEAD가 누구를 가르키고 있는지에 따라서 git merge &amp;lt;branch name&amp;gt;의 branch name을 신경써줘야한다. master 에서 exp를 합쳐보자. $ git merge exp Auto-merging work.txt # 자동으로 합쳐준다. CONFLICT (content): Merge conflict in work.txt Automatic merge failed; fix conflicts and then commit the result. conflict이 났다고 알려준다. 왜 그런지 살펴보자. (master|MERGING) 0 0 m1 0 0 e1 0 m1 0 e1 0 &amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt;&amp;lt; HEAD m1 ======= e1 &amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; exp 다른 것들은 자동으로 합쳐줬지만 마지막 행은 parent와 비교했을 때 둘다 변경이 되었으니 개발자가 변경해달라고 요청하는 것이다. branch를 보면 master|MERGING 로 되어있어, 합성중인 상태라는 것을 알 수 있다. 만약 합성을 취소하고 싶다면 git merge --abort명령어를 사용하면 합성 전으로 돌아갈 수 있다. 충돌 내용을 변경 후, 합성을 다시 진행하고 싶다면 git commit을 하면 새로운 commit ID를 만들어 완성본을 보여준다. (master|MERGING) $ git commit -am &quot;working merge&quot; [master dfdca9c] working merge (master) $ git log --oneline --all --graph * dfdca9c (HEAD -&amp;gt; master) working merge |\ | * 4708c05 (exp) working e1 * | ecae6e2 working -m1 |/ * aec874d working 1 git log를 찍어서 보면 제대로 합성되었음을 확인 할 수 있다. «««&amp;lt; HEAD «««&amp;lt; HEAD — GitHub 지금까지 내용들은 모두 local에서 이뤄진 것! 혹여나 노트북이 말썽을 일으켜 포맷을 해야된다면 지금까지 작업했던 것이 다 날아가게 된다. 그래서 우리는 GitHub 같은 remote storage(원격 저장소)를 이용해 백업을 해야한다. 아직, GitHub에 가입 하지 않았다면 회원가입을 하자. +를 누르게 되면 New repository가 보인다. 프로젝트를 올릴 때 자주 가게 될 녀석이다. Repository name에 진행중인 프로젝트 이름을 적어주고, 프로젝트의 성향에 따라 Public, Private을 설정하면 될 것 같다. README는 주로 프로젝트 설명서이다. 마크다운 형식으로 작성 할 수 있다고 하는데 아직 작성해본 적은 없다. Repository name을 TestRepository라고 적고 생성해보았다. 이제 local storage에 remote storage 경로를 지정해주면 연결은 끝이 난다. $ git remote add git remote add &amp;lt;remote name&amp;gt;&amp;lt;HTTPS or SSH&amp;gt; remote storage에 연결해주기 위한 명령어이다. &amp;lt;remote name&amp;gt;는 remote storage의 이름을 적는데, 대부분 origin을 많이 쓴다고 한다. &amp;lt;HTTPS or SSH&amp;gt;는 적혀져 있으니 HTTPS로 할 것인지 SSH로 할 것인지 정해주면 된다. git merge 했던 프로젝트와 연결해보겠다. $ git remote add origin git@github.com:HeumHeum2/TestRepository.git 연결이 되었는지 확인해보고자 프로젝트를 올려봐야 알 것 같다. $ git push git push -u &amp;lt;remote name&amp;gt; &amp;lt;branch&amp;gt; 명령어는 프로젝트를 HEAD가 가르키고 있는 branch와 같은 이름으로 된 remote storage의 branch에 업로드 해주는 역할을 한다. $ git push -u origin master The authenticity of host 'github.com (15.164.81.167)' can't be established. RSA key fingerprint is SHA256: ### Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added 'github.com,15.164.81.167' (RSA) to the list of known hosts. git@github.com: Permission denied (publickey). fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 진행하다보면 이런 창이 나올 수도 있다. SSH Key가 나의 계정에 등록되지 않았기에 발생하는 Permission denied이다. 당황하지 말고, 내 계정의 Settings을 들어가보자. 들어가게 되면 이런 창이 나오는데, 혹시 SSH Key를 어디서 확인하는지 모르는 경우 여기를 클릭해 진행하면 될 것이다. $ git push -u origin master Enumerating objects: 12, done. Counting objects: 100% (12/12), done. Delta compression using up to 12 threads Compressing objects: 100% (4/4), done. Writing objects: 100% (12/12), 853 bytes | 426.00 KiB/s, done. Total 12 (delta 1), reused 0 (delta 0) remote: Resolving deltas: 100% (1/1), done. To https://github.com/HeumHeum2/TestRepository.git * [new branch] master -&amp;gt; master Branch 'master' set up to track remote branch 'master' from 'origin'. $ git log --oneline dfdca9c (HEAD -&amp;gt; master, origin/master) working merge 4708c05 (exp) working e1 ecae6e2 working -m1 aec874d working 1 SSH KEY 등록이 끝나고 push를 하면 remote storage에 파일이 업로드 된 모습과, git log에서는 origin/master가 생긴 것을 볼 수 있다. $ git pull git push가 remote storage에 업로드 하는 명령어라면, git pull은 다운로드 하는 명령어이다. git pull도 처음에 remote storage를 연결 시켜줘야하며, 주로 협업 진행 중 일을 시작할 때 가장 많이 사용되는 명령어라고 한다. $ git clone git clone &amp;lt;HTTPS OR SSH&amp;gt; 는 .git 디렉토리가 없어도 remote storage에 업로드 되어있는 버전을 그대로 가져와 작업 할 수 있게 도와주는 명령어이다. 마치며 3일동안의 Git 세미나가 끝이 났다… Git의 사용법을 몰라 두려워만 하고 있었는데 세미나를 통해 Git이 너무 편리한 녀석인 것을 알게 되었다. 모르면 정말 불편하지만 알게되면 정말 편리한 Git.. 그저 갓 다시 한번 복습하기 위해 처음으로 블로그에 글을 써봤다. 남들에게 알려준다는 생각으로 글을 쓰다보니 내가 어떤 것을 모르는지 깨닫게 된 계기와 지식을 공유 할때 내가 즐거워한다는 것을 깨달았다. React를 현재 공부중인데, 지식을 공유한다고 생각하고 하나 씩 글을 써 나가야겠다.</summary>
      

      
      
    </entry>
  
  
  
    <entry xml:lang="ko">
      
      <title type="html">Git 공부 2일차</title>
      
      
      <link href="http://localhost:4000/2019/12/12/second-of-git/" rel="alternate" type="text/html" title="Git 공부 2일차" />
      
      <published>2019-12-12T00:00:00+00:00</published>
      <updated>2019-12-12T00:00:00+00:00</updated>
      <id>http://localhost:4000/2019/12/12/second-of-git</id>
      <content type="html" xml:base="http://localhost:4000/2019/12/12/second-of-git/">&lt;p&gt;이번 세미나의 중심 내용은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 명령어와 &lt;strong&gt;HEAD&lt;/strong&gt;, &lt;strong&gt;master&lt;/strong&gt; 였다.&lt;/p&gt;

&lt;h3&gt;$ git log&lt;/h3&gt;

&lt;p&gt;1일차에서 배운 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;는 기록 된 메시지들을 볼 수 있는 명령어였다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 실행시키게 되면 맨 처음 &lt;strong&gt;HEAD&lt;/strong&gt;를 본다고 한다. &lt;strong&gt;HEAD -&amp;gt; master&lt;/strong&gt; 이 형태를 볼 수 있는데, &lt;strong&gt;HEAD&lt;/strong&gt;가 &lt;strong&gt;master&lt;/strong&gt;를 가르키고 있구나 정도만 이해하면 될 것 같다.&lt;/p&gt;

&lt;p&gt;commit ID는 commit 옆에 있는&lt;code class=&quot;highlighter-rouge&quot;&gt;1b5db033fac67ab86f6f166c3ad6e101411cd906&lt;/code&gt; 부분으로 Author email, files, commit message, parent, Date 값 들을 &lt;strong&gt;Hash&lt;/strong&gt;로 암호화(Encryption) 한 것이다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git reset&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;은 삭제와 복구를 할 수 있는 명령어라고 한다.
해당 명령어 사용 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset &amp;lt;commit id&amp;gt;&lt;/code&gt;로 현재 기록하고 있었던 파일들이 동작을 이상하게 하거나 삭제해야 할 경우, 이전 기록의 commit ID로 복구가 되고 이 후에 기록했던 파일들은 삭제가 된다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset 103e78de24c45cd227f489bc255c831e6cdb09e0
Unstaged changes after reset:
M       work.txt
M       work3.txt           &lt;span class=&quot;c&quot;&gt;# 파일 내용들이 변경되었음을 확인할 수 있음&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit 103e78de24c45cd227f489bc255c831e6cdb09e0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;여기서 &lt;strong&gt;master&lt;/strong&gt;가 &lt;strong&gt;1b5db…&lt;/strong&gt; 에서 &lt;strong&gt;103e7…&lt;/strong&gt;로 commit ID가 변경되었음을 알 수 있었다. 그런데 &lt;strong&gt;1b5db…&lt;/strong&gt;은 진짜로 삭제되었을까?? 다시 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;을 사용해서 확인해보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git reset 1b5db033fac67ab86f6f166c3ad6e101411cd906
Unstaged changes after reset:
M       work.txt&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;work.txt가 변경되었음을 알려준다. &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 찍어서 확인해보면&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;다시 복원이 되었다. 즉, &lt;strong&gt;Git 불변성&lt;/strong&gt;을 확인 할 수 있었다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;으로 이전 버전으로 복구한 후 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m&lt;/code&gt;을 했을 때 어떻게 되는지는 각자 해보면 좋을 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git checkout&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;은 시간여행을 해주는 명령어라고 설명해주셨다. 명령어 사용법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;과 동일하다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git checkout 103e78d
Note: switching to &lt;span class=&quot;s1&quot;&gt;'103e78d'&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;.&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 103e78d라는 commend ID로 변경되었다는 것을 알 수 있다.&lt;/span&gt;

You are &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'detached HEAD'&lt;/span&gt; state. You can look around, make experimental
changes and commit them, and you can discard any commits you make &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
&lt;span class=&quot;k&quot;&gt;do &lt;/span&gt;so &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;now or later&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; by using &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; with the switch command. Example:

  git switch &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; &amp;lt;new-branch-name&amp;gt;

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to &lt;span class=&quot;nb&quot;&gt;false

&lt;/span&gt;HEAD is now at 103e78d working 4  &lt;span class=&quot;c&quot;&gt;# commend ID로 인해 파일들이 변경되었음을 알려줌.&lt;/span&gt;
M       work.txt

&lt;span class=&quot;c&quot;&gt;# git log를 찍어 기록 확인해보자.&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit 103e78de24c45cd227f489bc255c831e6cdb09e0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt;을 했더니 &lt;strong&gt;HEAD -&amp;gt; master&lt;/strong&gt;가 &lt;strong&gt;HEAD&lt;/strong&gt;로 변경 되어있음을 볼 수 있다. 그렇다면 &lt;strong&gt;master&lt;/strong&gt;는 어디에 있을까? &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;에 &lt;code class=&quot;highlighter-rouge&quot;&gt;--all&lt;/code&gt; 옵션을 붙여서 찾아보자.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;master&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;master&lt;/strong&gt;를 보면 최근에 기록한 곳의 commit ID를 가지고 있다고 한다. 여기에서 &lt;strong&gt;master&lt;/strong&gt;는 최근 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit&lt;/code&gt;한 commit ID를 가진다는 것, &lt;strong&gt;HEAD&lt;/strong&gt;는 현재 작업하고 있는 위치를 알려준다는 것을 알 수 있었다. 현재 진행중인 작업을 최근에 작업한 곳으로 이동하고 싶다면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout master&lt;/code&gt;를 사용하면 된다. 만약 &lt;code class=&quot;highlighter-rouge&quot;&gt;master&lt;/code&gt;가 아닌 commend ID로 입력하게 되면 어떻게 되는지는 직접 해보면 좋을 것 같다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;$ git branch&lt;/h3&gt;

&lt;p&gt;마지막으로 &lt;strong&gt;master&lt;/strong&gt;는 &lt;strong&gt;branch&lt;/strong&gt;라고 불려진다. &lt;strong&gt;분기&lt;/strong&gt;라는 뜻으로 게임에서 어느정도 캐릭터를 육성하다가 직업을 선택하는 순간이 온다. 그 순간을 &lt;strong&gt;분기&lt;/strong&gt;라고 하는데, 프로젝트를 만들 때에도 &lt;strong&gt;분기&lt;/strong&gt;가 찾아온다. &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch&lt;/code&gt;을 사용하면 프로젝트를 하나 더 복사하지 않아도 되는 장점이 생긴다. 명령어 사용 방법은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git branch  &amp;lt;branch name&amp;gt;&lt;/code&gt;이다.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git branch exp

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;HEAD -&amp;gt; master, exp&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;branch로 master, exp가 있는 것을 볼 수 있다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;마치며&lt;/h2&gt;

&lt;p&gt;내일은 &lt;strong&gt;branch&lt;/strong&gt;가 여러 개 있고, 작업하고 있는 &lt;strong&gt;branch&lt;/strong&gt;가 성공했을 경우 &lt;strong&gt;branch&lt;/strong&gt;를 합치고 싶을 때 사용하는 명령어를 배운다고 한다.
&lt;strong&gt;HEAD&lt;/strong&gt;와 &lt;strong&gt;master&lt;/strong&gt;가 무엇인지 알게되었고, Git은 변하지 않고 언제나 기록하고 있으니 두려움 없이 &lt;code class=&quot;highlighter-rouge&quot;&gt;git chechout&lt;/code&gt; 과 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt;을 많이 써봐야겠다.
벌써 Git이 친구 같다.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>HeumHeum2</name>
          
          
        </author>
      

      
        <category term="Git" />
      
        <category term="Study" />
      

      

      
        <summary type="html">이번 세미나의 중심 내용은 git reset, git checkout 명령어와 HEAD, master 였다. $ git log 1일차에서 배운 git log는 기록 된 메시지들을 볼 수 있는 명령어였다. $ git log commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -&amp;gt; master) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:47 2019 +0900 working 5 commit 103e78de24c45cd227f489bc255c831e6cdb09e0 Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 git log를 실행시키게 되면 맨 처음 HEAD를 본다고 한다. HEAD -&amp;gt; master 이 형태를 볼 수 있는데, HEAD가 master를 가르키고 있구나 정도만 이해하면 될 것 같다. commit ID는 commit 옆에 있는1b5db033fac67ab86f6f166c3ad6e101411cd906 부분으로 Author email, files, commit message, parent, Date 값 들을 Hash로 암호화(Encryption) 한 것이다. $ git reset git reset은 삭제와 복구를 할 수 있는 명령어라고 한다. 해당 명령어 사용 방법은 git reset &amp;lt;commit id&amp;gt;로 현재 기록하고 있었던 파일들이 동작을 이상하게 하거나 삭제해야 할 경우, 이전 기록의 commit ID로 복구가 되고 이 후에 기록했던 파일들은 삭제가 된다. $ git reset 103e78de24c45cd227f489bc255c831e6cdb09e0 Unstaged changes after reset: M work.txt M work3.txt # 파일 내용들이 변경되었음을 확인할 수 있음 $ git log commit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD -&amp;gt; master) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 여기서 master가 1b5db… 에서 103e7…로 commit ID가 변경되었음을 알 수 있었다. 그런데 1b5db…은 진짜로 삭제되었을까?? 다시 git reset을 사용해서 확인해보자. $ git reset 1b5db033fac67ab86f6f166c3ad6e101411cd906 Unstaged changes after reset: M work.txt work.txt가 변경되었음을 알려준다. git log를 찍어서 확인해보면 $ git log commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -&amp;gt; master) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:47 2019 +0900 working 5 commit 103e78de24c45cd227f489bc255c831e6cdb09e0 Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 다시 복원이 되었다. 즉, Git 불변성을 확인 할 수 있었다. 만약 git reset으로 이전 버전으로 복구한 후 git commit -m을 했을 때 어떻게 되는지는 각자 해보면 좋을 것 같다. $ git checkout git checkout은 시간여행을 해주는 명령어라고 설명해주셨다. 명령어 사용법은 git reset과 동일하다. $ git checkout 103e78d Note: switching to '103e78d'. # 103e78d라는 commend ID로 변경되었다는 것을 알 수 있다. You are in 'detached HEAD' state. You can look around, make experimental changes and commit them, and you can discard any commits you make in this state without impacting any branches by switching back to a branch. If you want to create a new branch to retain commits you create, you may do so (now or later) by using -c with the switch command. Example: git switch -c &amp;lt;new-branch-name&amp;gt; Or undo this operation with: git switch - Turn off this advice by setting config variable advice.detachedHead to false HEAD is now at 103e78d working 4 # commend ID로 인해 파일들이 변경되었음을 알려줌. M work.txt # git log를 찍어 기록 확인해보자. $ git log commit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 git checkout을 했더니 HEAD -&amp;gt; master가 HEAD로 변경 되어있음을 볼 수 있다. 그렇다면 master는 어디에 있을까? git log에 --all 옵션을 붙여서 찾아보자. $ git log --all commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (master) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:47 2019 +0900 working 5 commit 103e78de24c45cd227f489bc255c831e6cdb09e0 (HEAD) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 master를 보면 최근에 기록한 곳의 commit ID를 가지고 있다고 한다. 여기에서 master는 최근 git commit한 commit ID를 가진다는 것, HEAD는 현재 작업하고 있는 위치를 알려준다는 것을 알 수 있었다. 현재 진행중인 작업을 최근에 작업한 곳으로 이동하고 싶다면 git checkout master를 사용하면 된다. 만약 master가 아닌 commend ID로 입력하게 되면 어떻게 되는지는 직접 해보면 좋을 것 같다. $ git branch 마지막으로 master는 branch라고 불려진다. 분기라는 뜻으로 게임에서 어느정도 캐릭터를 육성하다가 직업을 선택하는 순간이 온다. 그 순간을 분기라고 하는데, 프로젝트를 만들 때에도 분기가 찾아온다. git branch을 사용하면 프로젝트를 하나 더 복사하지 않아도 되는 장점이 생긴다. 명령어 사용 방법은 git branch &amp;lt;branch name&amp;gt;이다. $ git branch exp $ git log commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 (HEAD -&amp;gt; master, exp) Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:47 2019 +0900 working 5 commit 103e78de24c45cd227f489bc255c831e6cdb09e0 Author: HeumHeum2 &amp;lt;jwh6295@gmail.com&amp;gt; Date: Wed Dec 11 15:23:31 2019 +0900 working 4 branch로 master, exp가 있는 것을 볼 수 있다. 마치며 내일은 branch가 여러 개 있고, 작업하고 있는 branch가 성공했을 경우 branch를 합치고 싶을 때 사용하는 명령어를 배운다고 한다. HEAD와 master가 무엇인지 알게되었고, Git은 변하지 않고 언제나 기록하고 있으니 두려움 없이 git chechout 과 git reset을 많이 써봐야겠다. 벌써 Git이 친구 같다.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Git 공부 1일차</title>
      
      
      <link href="http://localhost:4000/2019/12/11/first-of-git/" rel="alternate" type="text/html" title="Git 공부 1일차" />
      
      <published>2019-12-11T00:00:00+00:00</published>
      <updated>2019-12-11T00:00:00+00:00</updated>
      <id>http://localhost:4000/2019/12/11/first-of-git</id>
      <content type="html" xml:base="http://localhost:4000/2019/12/11/first-of-git/">&lt;p&gt;Git을 사용해 본 경험은 로컬 저장소에 진행하고 있는 프로젝트를 저장시키고, &lt;code class=&quot;highlighter-rouge&quot;&gt;push&lt;/code&gt; 라는 명령어를 사용해 GitHub에 올리는게 전부였다.
Facebook 생활코딩 커뮤니티를 살펴보는 중 &lt;a href=&quot;https://onoffmix.com/event/203172&quot;&gt;KISA 핀테크 기술지원센터&lt;/a&gt;에서 Git에 대한 세미나가 열린다는 글을 보았다.
가격은 &lt;strong&gt;무료&lt;/strong&gt; 였기에 이 기회에 Git에 대해 배우고자 참석했다.&lt;/p&gt;

&lt;p&gt;세미나 내용은 Git을 처음 만든 개발자, 배경, 구조, 흐름 순으로 진행되었다.&lt;/p&gt;

&lt;p&gt;Git을 처음 만든 사람은 Linux를 만든 &lt;a href=&quot;https://ko.wikipedia.org/wiki/%EB%A6%AC%EB%88%84%EC%8A%A4_%ED%86%A0%EB%A5%B4%EB%B0%9C%EC%8A%A4&quot;&gt;리누스 토르발스&lt;/a&gt;라고 한다.&lt;br /&gt;
&lt;del&gt;Linux도 만들고 Git도 만든 이 사람은 천재가 아닐까 싶다..&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;Git이 처음 나온 배경은 버전을 만들 때마다, 버전의 이름들이 너무 지저분해지고, 또한 이전 버전의 자료들이 필요 할 경우 용량이 어마어마하게 커졌었다. 이러한 불편함을 해결하고자 Git이 나왔다고 한다.&lt;/p&gt;

&lt;p&gt;구조적으론 사용자가 실제 작업을 하는 &lt;strong&gt;Working Directory&lt;/strong&gt;, 실제 작업을 가상의 공간에 담는 &lt;strong&gt;Stage Area&lt;/strong&gt;, Git에 작업이 기록 되어있는 &lt;strong&gt;Repository&lt;/strong&gt;로 되어있다.&lt;/p&gt;

&lt;p&gt;Git으로 버전관리를 하기 위해선 먼저 작업 공간을 알려줘야 한다. &lt;strong&gt;Working Directory&lt;/strong&gt;에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;git init&lt;/code&gt;을 사용해 &lt;strong&gt;.git&lt;/strong&gt; 디렉토리를 생성하면, Git은 ‘아 여기서 작업을 하는구나’ 라고 인식하게 된다. 디렉토리 &lt;strong&gt;.git&lt;/strong&gt;이 &lt;strong&gt;Repository&lt;/strong&gt;이며, 기록을 위해 &lt;strong&gt;Working Directory&lt;/strong&gt;의 작업들을 복사해 &lt;strong&gt;Stage Area&lt;/strong&gt;에 넣어준 다음 &lt;strong&gt;Stage Area&lt;/strong&gt; 작업들을 &lt;strong&gt;Repository&lt;/strong&gt;에 기록하는 순서이다.&lt;/p&gt;

&lt;p&gt;세미나에서 &lt;strong&gt;git bash&lt;/strong&gt;를 사용해 ComendLine으로 Git을 다루었다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3&gt;Git 명령어&lt;/h3&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git init &lt;span class=&quot;c&quot;&gt;# 작업 할 폴더에 .git 폴더 생성&lt;/span&gt;
git status &lt;span class=&quot;c&quot;&gt;# Git 상황 확인&lt;/span&gt;
git add &amp;lt;filename&amp;gt; &lt;span class=&quot;c&quot;&gt;# 가상환경에 담기&lt;/span&gt;
git commit &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &amp;lt;commit message&amp;gt; &lt;span class=&quot;c&quot;&gt;# Git에 기록하기&lt;/span&gt;
git log &lt;span class=&quot;c&quot;&gt;# 기록 확인&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Git을 기록하기 위해서 가장 먼저 해야되는 것은 상태를 확인하는 것!! &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 &lt;strong&gt;Working Directory&lt;/strong&gt; 파일들의 생성, 수정, 삭제를 확인 할 수 있다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;.git&lt;/strong&gt;에 기록 시키기 전 &lt;strong&gt;Stage Area&lt;/strong&gt;에 담아야하니 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add &amp;lt;filename&amp;gt;&lt;/code&gt;을 사용하면 가상의 공간에 담을 수 있다.(파일 전부를 담으려면 &lt;code class=&quot;highlighter-rouge&quot;&gt;git add .&lt;/code&gt;)
&lt;strong&gt;Repository&lt;/strong&gt;에 기록하는 명령어는 &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -m &amp;lt;commit message&amp;gt;&lt;/code&gt;을 사용해 가상의 공간에 담겨있는 작업들을 기록했다. &lt;code class=&quot;highlighter-rouge&quot;&gt;-m&lt;/code&gt;옵션을 사용하지 않았을 때는 다른 입력창이 나왔는데 편의성과 세미나 시간으로 인해 자세한 건 따로 검색해봐야 할 것 같았다.(참고로 &lt;code class=&quot;highlighter-rouge&quot;&gt;commit -m&lt;/code&gt;을 할 때 GitHub 로그인을 시켜줬어야 했다.)&lt;/p&gt;

&lt;p&gt;이로써 Git으로 버전을 기록하는 것은 끝이 났다.&lt;/p&gt;

&lt;p&gt;이후 &lt;code class=&quot;highlighter-rouge&quot;&gt;git status&lt;/code&gt;로 상태를 확인하면 기록 파일들이 없는 것을 볼 수 있었고, 기록된 정보들을 보기 위해 &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;를 사용했다.
&lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt;에서 commit 옆에 숫자와 영어로 되어있는 &lt;strong&gt;Commit ID&lt;/strong&gt;와 내가 입력한 &lt;strong&gt;Commit Message&lt;/strong&gt; 그리고 &lt;strong&gt;HEAD-&amp;gt;master&lt;/strong&gt;를 볼 수 있었다.&lt;/p&gt;

&lt;p&gt;세미나에서 &lt;strong&gt;Commit ID&lt;/strong&gt;가 어떻게 만들어지는지도 알려주었는데, 나의 이메일과 기록한 파일, &lt;strong&gt;Commit Message&lt;/strong&gt; 그리고 &lt;strong&gt;Parent&lt;/strong&gt;를 합쳐 해쉬화 하여 &lt;strong&gt;Commit ID&lt;/strong&gt;를 만든다고 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2&gt;마치며&lt;/h2&gt;

&lt;p&gt;내일은 &lt;code class=&quot;highlighter-rouge&quot;&gt;git reset&lt;/code&gt; 명령어와 &lt;code class=&quot;highlighter-rouge&quot;&gt;git checkout&lt;/code&gt; 그리고, &lt;strong&gt;HEAD&lt;/strong&gt;와 &lt;strong&gt;mater&lt;/strong&gt;에 대해서 알려준다고 한다.
살짝 맛보기로 Git은 불변하기에 파일들을 삭제하지도 변경하지도 않는다는 말로 호기심을 자극했다..&lt;/p&gt;

&lt;p&gt;Git이 내부적으로 어떻게 돌아가는지 처음 알게 된 세미나였다. 앞으로도 Git을 써야하는 입장으로 굉장히 도움이 되었고, 같이 개발을 공부하는 사람들에게 Git을 전파해주고 싶어졌다.&lt;/p&gt;</content>

      
      
      
      
      

      
        <author>
            <name>HeumHeum2</name>
          
          
        </author>
      

      
        <category term="Git" />
      
        <category term="Study" />
      

      

      
        <summary type="html">Git을 사용해 본 경험은 로컬 저장소에 진행하고 있는 프로젝트를 저장시키고, push 라는 명령어를 사용해 GitHub에 올리는게 전부였다. Facebook 생활코딩 커뮤니티를 살펴보는 중 KISA 핀테크 기술지원센터에서 Git에 대한 세미나가 열린다는 글을 보았다. 가격은 무료 였기에 이 기회에 Git에 대해 배우고자 참석했다. 세미나 내용은 Git을 처음 만든 개발자, 배경, 구조, 흐름 순으로 진행되었다. Git을 처음 만든 사람은 Linux를 만든 리누스 토르발스라고 한다. Linux도 만들고 Git도 만든 이 사람은 천재가 아닐까 싶다.. Git이 처음 나온 배경은 버전을 만들 때마다, 버전의 이름들이 너무 지저분해지고, 또한 이전 버전의 자료들이 필요 할 경우 용량이 어마어마하게 커졌었다. 이러한 불편함을 해결하고자 Git이 나왔다고 한다. 구조적으론 사용자가 실제 작업을 하는 Working Directory, 실제 작업을 가상의 공간에 담는 Stage Area, Git에 작업이 기록 되어있는 Repository로 되어있다. Git으로 버전관리를 하기 위해선 먼저 작업 공간을 알려줘야 한다. Working Directory에서 git init을 사용해 .git 디렉토리를 생성하면, Git은 ‘아 여기서 작업을 하는구나’ 라고 인식하게 된다. 디렉토리 .git이 Repository이며, 기록을 위해 Working Directory의 작업들을 복사해 Stage Area에 넣어준 다음 Stage Area 작업들을 Repository에 기록하는 순서이다. 세미나에서 git bash를 사용해 ComendLine으로 Git을 다루었다. Git 명령어 git init # 작업 할 폴더에 .git 폴더 생성 git status # Git 상황 확인 git add &amp;lt;filename&amp;gt; # 가상환경에 담기 git commit -m &amp;lt;commit message&amp;gt; # Git에 기록하기 git log # 기록 확인 Git을 기록하기 위해서 가장 먼저 해야되는 것은 상태를 확인하는 것!! git status로 Working Directory 파일들의 생성, 수정, 삭제를 확인 할 수 있다. .git에 기록 시키기 전 Stage Area에 담아야하니 git add &amp;lt;filename&amp;gt;을 사용하면 가상의 공간에 담을 수 있다.(파일 전부를 담으려면 git add .) Repository에 기록하는 명령어는 git commit -m &amp;lt;commit message&amp;gt;을 사용해 가상의 공간에 담겨있는 작업들을 기록했다. -m옵션을 사용하지 않았을 때는 다른 입력창이 나왔는데 편의성과 세미나 시간으로 인해 자세한 건 따로 검색해봐야 할 것 같았다.(참고로 commit -m을 할 때 GitHub 로그인을 시켜줬어야 했다.) 이로써 Git으로 버전을 기록하는 것은 끝이 났다. 이후 git status로 상태를 확인하면 기록 파일들이 없는 것을 볼 수 있었고, 기록된 정보들을 보기 위해 git log를 사용했다. git log에서 commit 옆에 숫자와 영어로 되어있는 Commit ID와 내가 입력한 Commit Message 그리고 HEAD-&amp;gt;master를 볼 수 있었다. 세미나에서 Commit ID가 어떻게 만들어지는지도 알려주었는데, 나의 이메일과 기록한 파일, Commit Message 그리고 Parent를 합쳐 해쉬화 하여 Commit ID를 만든다고 한다. 마치며 내일은 git reset 명령어와 git checkout 그리고, HEAD와 mater에 대해서 알려준다고 한다. 살짝 맛보기로 Git은 불변하기에 파일들을 삭제하지도 변경하지도 않는다는 말로 호기심을 자극했다.. Git이 내부적으로 어떻게 돌아가는지 처음 알게 된 세미나였다. 앞으로도 Git을 써야하는 입장으로 굉장히 도움이 되었고, 같이 개발을 공부하는 사람들에게 Git을 전파해주고 싶어졌다.</summary>
      

      
      
    </entry>
  
  
</feed>
