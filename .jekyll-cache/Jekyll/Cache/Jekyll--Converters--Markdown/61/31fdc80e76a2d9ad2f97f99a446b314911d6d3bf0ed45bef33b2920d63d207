I"t#<p>이번 세미나의 중심 내용은 <code class="highlighter-rouge">git reset</code>, <code class="highlighter-rouge">git checkout</code> 명령어와 <strong>HEAD</strong>, <strong>master</strong> 였다.</p>

<h3>$ git log</h3>
<p>1일차에서 배운 <code class="highlighter-rouge">git log</code>는 기록 된 메시지들을 볼 수 있는 명령어였다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p><code class="highlighter-rouge">git log</code>를 실행시키게 되면 맨 처음 <strong>HEAD</strong>를 본다고 한다. <strong>HEAD -&gt; master</strong> 이 형태를 볼 수 있는데, <strong>HEAD</strong>가 <strong>master</strong>를 가르키고 있구나 정도만 이해하면 될 것 같다.</p>

<p>commit ID는 commit 옆에 있는<code class="highlighter-rouge">1b5db033fac67ab86f6f166c3ad6e101411cd906</code> 부분으로 Author email, files, commit message, parent, Date 값 들을 <strong>Hash</strong>로 암호화(Encryption) 한 것이다.</p>

<h3>$ git reset</h3>
<p><code class="highlighter-rouge">git reset</code>은 삭제와 복구를 할 수 있는 명령어라고 한다.
해당 명령어 사용 방법은 <code class="highlighter-rouge">git reset &lt;commit id&gt;</code>로 현재 기록하고 있었던 파일들이 동작을 이상하게 하거나 삭제해야 할 경우, 이전 기록의 commit ID로 복구가 되고 이 후에 기록했던 파일들은 삭제가 된다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git reset 103e78de24c45cd227f489bc255c831e6cdb09e0
Unstaged changes after reset:
M       work.txt
M       work3.txt           <span class="c"># 파일 내용들이 변경되었음을 확인할 수 있음</span>

<span class="nv">$ </span>git log
commit 103e78de24c45cd227f489bc255c831e6cdb09e0 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p>여기서 <strong>master</strong>가 <strong>1b5db…</strong> 에서 <strong>103e7…</strong>로 commit ID가 변경되었음을 알 수 있었다. 그런데 <strong>1b5db…</strong>은 진짜로 삭제되었을까?? 다시 <code class="highlighter-rouge">git reset</code>을 사용해서 확인해보자.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git reset 1b5db033fac67ab86f6f166c3ad6e101411cd906
Unstaged changes after reset:
M       work.txt</code></pre></figure>

<p>work.txt가 변경되었음을 알려준다. <code class="highlighter-rouge">git log</code>를 찍어서 확인해보면</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 <span class="o">(</span>HEAD -&gt; master<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p>다시 복원이 되었다. 즉, <strong>Git 불변성</strong>을 확인 할 수 있었다. 만약 <code class="highlighter-rouge">git reset</code>으로 이전 버전으로 복구한 후 <code class="highlighter-rouge">git commit -m</code>을 했을 때 어떻게 되는지는 각자 해보면 좋을 것 같다.</p>

<h3>$ git checkout</h3>
<p><code class="highlighter-rouge">git checkout</code>은 시간여행을 해주는 명령어라고 설명해주셨다. 명령어 사용법은 <code class="highlighter-rouge">git reset</code>과 동일하다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git checkout 103e78d
Note: switching to <span class="s1">'103e78d'</span><span class="nb">.</span>  <span class="c"># 103e78d라는 commend ID로 변경되었다는 것을 알 수 있다.</span>

You are <span class="k">in</span> <span class="s1">'detached HEAD'</span> state. You can look around, make experimental
changes and commit them, and you can discard any commits you make <span class="k">in </span>this
state without impacting any branches by switching back to a branch.

If you want to create a new branch to retain commits you create, you may
<span class="k">do </span>so <span class="o">(</span>now or later<span class="o">)</span> by using <span class="nt">-c</span> with the switch command. Example:

  git switch <span class="nt">-c</span> &lt;new-branch-name&gt;

Or undo this operation with:

  git switch -

Turn off this advice by setting config variable advice.detachedHead to <span class="nb">false

</span>HEAD is now at 103e78d working 4  <span class="c"># commend ID로 인해 파일들이 변경되었음을 알려줌.</span>
M       work.txt

<span class="c"># git log를 찍어 기록 확인해보자.</span>

<span class="nv">$ </span>git log
commit 103e78de24c45cd227f489bc255c831e6cdb09e0 <span class="o">(</span>HEAD<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p><code class="highlighter-rouge">git checkout</code>을 했더니 <strong>HEAD -&gt; master</strong>가 <strong>HEAD</strong>로 변경 되어있음을 볼 수 있다. 그렇다면 <strong>master</strong>는 어디에 있을까? <code class="highlighter-rouge">git log</code>에 <code class="highlighter-rouge">--all</code> 옵션을 붙여서 찾아보자.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git log <span class="nt">--all</span>
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 <span class="o">(</span>master<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0 <span class="o">(</span>HEAD<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p><strong>master</strong>를 보면 최근에 기록한 곳의 commit ID를 가지고 있다고 한다. 여기에서 <strong>master</strong>는 최근 <code class="highlighter-rouge">git commit</code>한 commit ID를 가진다는 것, <strong>HEAD</strong>는 현재 작업하고 있는 위치를 알려준다는 것을 알 수 있었다. 현재 진행중인 작업을 최근에 작업한 곳으로 이동하고 싶다면 <code class="highlighter-rouge">git checkout master</code>를 사용하면 된다. 만약 <code class="highlighter-rouge">master</code>가 아닌 commend ID로 입력하게 되면 어떻게 되는지는 직접 해보면 좋을 것 같다.</p>

<h3>$ git branch</h3>
<p>마지막으로 <strong>master</strong>는 <strong>branch</strong>라고 불려진다. <strong>분기</strong>라는 뜻으로 게임에서 어느정도 캐릭터를 육성하다가 직업을 선택하는 순간이 온다. 그 순간을 <strong>분기</strong>라고 하는데, 프로젝트를 만들 때에도 <strong>분기</strong>가 찾아온다. <code class="highlighter-rouge">git branch</code>을 사용하면 프로젝트를 하나 더 복사하지 않아도 되는 장점이 생긴다. 명령어 사용 방법은 <code class="highlighter-rouge">git branch  &lt;branch name&gt;</code>이다.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>git branch exp

<span class="nv">$ </span>git log
commit 1b5db033fac67ab86f6f166c3ad6e101411cd906 <span class="o">(</span>HEAD -&gt; master, exp<span class="o">)</span>
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:47 2019 +0900

    working 5

commit 103e78de24c45cd227f489bc255c831e6cdb09e0
Author: HeumHeum2 &lt;jwh6295@gmail.com&gt;
Date:   Wed Dec 11 15:23:31 2019 +0900

    working 4</code></pre></figure>

<p>branch로 master, exp가 있는 것을 볼 수 있다.</p>

<h2>마치며</h2>
<p>내일은 <strong>branch</strong>가 여러 개 있고, 작업하고 있는 <strong>branch</strong>가 성공했을 경우 <strong>branch</strong>를 합치고 싶을 때 사용하는 명령어를 배운다고 한다.
<strong>HEAD</strong>와 <strong>master</strong>가 무엇인지 알게되었고, Git은 변하지 않고 언제나 기록하고 있으니 두려움 없이 <code class="highlighter-rouge">git chechout</code> 과 <code class="highlighter-rouge">git reset</code>을 많이 써봐야겠다.
벌써 Git이 친구 같다.</p>
:ET